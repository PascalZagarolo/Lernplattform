datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]
  ratings Ratings[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  comments Comments[]

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments {
  id String @id @default(uuid())
  
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  content String @db.Text

  isEdited Boolean @default(false)

  likes Int @default(0)

  likedBy Likes[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@index([userId])
 
}

model User {
  id String @id @default(uuid())
  name String
  username String @unique

  comments Comments[]
  links Links[]
  ratings Ratings[]

  send Message[] @relation(name : "user1")
  received Message[] @relation(name : "user2")
 
  user1Convo Conversation[] @relation(name : "user1Convo")
  user2Convo Conversation[] @relation(name : "user2Convo")

  imageUrl String? @db.Text

  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Likes {
  id String @id @default(uuid())
  
  userId String
  
  commentId String
  comment Comments @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([commentId])
  @@unique([userId, commentId])
}

model Links {

  
  userId String @id @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  socialLinks SocialLinks[]

  @@index([userId])

}

model SocialLinks {
  id String @id @default(uuid())

  linksId String
  linkList Links @relation(fields: [linksId], references: [userId], onDelete: Cascade)

  linkType Socials @unique
  enabled Boolean @default(false)
  username String

  @@index([linksId])
}

enum Socials {
  instagram
  twitter
  youtube
  email
}

model Ratings {
  id String  @default(uuid())

  userId String 
  user User @relation(fields : [userId], references: [id], onDelete: Cascade)

  courseId String
  course Course @relation(fields : [courseId], references: [id], onDelete: Cascade)

  score Int

  @@unique([userId, courseId])

  @@index([courseId])
  @@index([userId])
}

model Conversation {
  id String @id @default(uuid())

  user1Id String @unique
  user1Convo User @relation(name : "user1Convo" , fields: [user1Id], references: [id], onDelete: Cascade)

  user2Id String @unique
  user2Convo User @relation(name : "user2Convo" , fields: [user2Id], references: [id], onDelete: Cascade)

  @@index([user1Id])
  @@index([user2Id])
  @@unique([user1Id, user2Id])
}

model Message {
  id String @id @default(uuid())

  receiverId String
  received User @relation(name : "user1" , fields: [receiverId], references: [id], onDelete: Cascade)

  senderId String
  send User @relation(name : "user2" , fields: [senderId], references: [id], onDelete: Cascade)

  content String? @db.Text

  imageUrl String? @db.Text

  @@index([receiverId])
  @@index([senderId])
}

